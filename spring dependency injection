좋습니다!
Spring의 Dependency Injection (DI) 은 스프링 프레임워크의 핵심 개념 중 하나이며, 객체 간의 의존 관계를 프레임워크가 대신 주입해주는 방식입니다.

⸻

1. Dependency Injection이란?
	•	간단히 말해, 객체가 필요한 의존 객체를 직접 생성하지 않고, 외부에서 주입(Injection)받는 방식입니다.
	•	목적은 객체 간 결합도를 낮추고, 코드의 유지보수성과 테스트 용이성을 높이는 데 있습니다.

예: 직접 생성 방식 (DI 이전)

public class OrderService {
    private OrderRepository repository = new OrderRepository(); // 강한 결합
}

DI 적용 후

public class OrderService {
    private final OrderRepository repository;

    // 생성자를 통해 주입받음
    public OrderService(OrderRepository repository) {
        this.repository = repository;
    }
}



⸻

2. Spring에서의 DI 방식

Spring은 아래와 같은 방식으로 의존성을 주입할 수 있습니다.

(1) 생성자 주입 (가장 추천되는 방식)

@Component
public class OrderService {
    private final OrderRepository repository;

    @Autowired
    public OrderService(OrderRepository repository) {
        this.repository = repository;
    }
}

(2) 필드 주입 (테스트나 간단한 경우)

@Component
public class OrderService {
    @Autowired
    private OrderRepository repository;
}

(3) 세터 주입

@Component
public class OrderService {
    private OrderRepository repository;

    @Autowired
    public void setRepository(OrderRepository repository) {
        this.repository = repository;
    }
}



⸻

3. 스프링 DI의 작동 원리
	1.	Spring이 시작될 때, 설정 파일이나 어노테이션(@Component, @Service, @Repository)을 기반으로 Bean을 생성합니다.
	2.	DI가 필요한 클래스에 대해, 스프링 컨테이너가 의존성 그래프를 분석하여 필요한 객체를 주입합니다.
	3.	개발자는 객체 생성과 의존성 주입을 신경쓰지 않고 로직 개발에 집중할 수 있습니다.

⸻

4. 장점
	•	결합도 낮춤 (Loose Coupling) → 유지보수성 향상
	•	객체 생성을 스프링 컨테이너에 위임 → 코드 단순화
	•	유닛 테스트 용이 (Mock 주입 가능)

⸻

5. 예제: 간단한 구조

@Component
public class UserRepository {
    public String findUser() {
        return "홍길동";
    }
}

@Service
public class UserService {
    private final UserRepository userRepository;

    @Autowired
    public UserService(UserRepository repo) {
        this.userRepository = repo;
    }

    public void printUser() {
        System.out.println(userRepository.findUser());
    }
}

Spring Boot 프로젝트에서는 @SpringBootApplication이 포함된 클래스가 실행되면서 이 모든 의존성을 자동으로 주입해줍니다.

⸻

필요하시면:
	•	XML 기반 DI 방식 예제
	•	DI와 IoC의 차이
	•	@Qualifier, @Primary를 이용한 복수 Bean 주입 방식
도 이어서 설명해 드릴게요!