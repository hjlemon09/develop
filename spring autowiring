좋습니다!
Spring의 Autowiring은 의존 객체(Bean)를 자동으로 주입해주는 기능입니다.
개발자가 일일이 new로 객체를 생성하거나 설정 파일에서 지정하지 않아도,
Spring이 컨테이너 안의 Bean을 찾아서 자동으로 연결해 줍니다.

⸻

1. Autowiring이란?

자동 의존성 주입 기능

스프링 컨테이너가 타입(type) 또는 이름(name) 등을 기준으로
필요한 의존 객체를 자동으로 찾아서 주입해 줍니다.

⸻

2. 사용하는 방법

(1) @Autowired 어노테이션

@Component
public class OrderService {
    @Autowired
    private OrderRepository orderRepository;
}

Spring은 OrderRepository 타입의 Bean을 찾아 orderRepository 필드에 주입합니다.

⸻

3. Autowiring 방식 종류 (구버전 XML 방식 포함)

방식	설명
byType	타입을 기준으로 자동 주입
byName	이름을 기준으로 자동 주입
constructor	생성자를 기준으로 자동 주입
autodetect	생성자가 있으면 constructor, 없으면 byType 방식으로 동작 (구버전)

현재는 @Autowired, @Inject, @Resource 같은 어노테이션 기반이 주로 사용됩니다.

⸻

4. 주요 어노테이션들

(1) @Autowired
	•	타입 기준 자동 주입
	•	생성자, 세터, 필드 모두 가능
	•	필수(default: true)

@Autowired(required = false) // 선택적 주입

(2) @Qualifier
	•	동일한 타입의 Bean이 여러 개 있을 때 이름으로 명확히 지정

@Autowired
@Qualifier("memberRepositoryImpl1")
private MemberRepository memberRepository;

(3) @Inject (javax 표준)
	•	@Autowired와 유사
	•	@Qualifier 대신 @Named 사용

@Inject
@Named("memberRepositoryImpl1")
private MemberRepository memberRepository;



⸻

5. 자동 주입 대상이 여러 개일 때 해결법

@Component("repo1")
public class Repo1 implements Repository {}

@Component("repo2")
public class Repo2 implements Repository {}

@Autowired
@Qualifier("repo2")
private Repository repository; // 정확히 어떤 Bean을 주입할지 지정



⸻

6. 주입 대상이 없을 경우 처리

@Autowired(required = false)
private Optional<Logger> logger;  // 없으면 null 또는 Optional.empty()



⸻

7. 요약

항목	설명
주입 방식	타입(byType), 이름(byName), 생성자
주요 어노테이션	@Autowired, @Qualifier, @Inject, @Resource
권장 방식	생성자 주입 + @Autowired (Spring 4.3 이상은 생략 가능)
주의 사항	같은 타입의 Bean이 여러 개일 경우 명시적 지정 필요



⸻

필요하시면 @Primary를 사용한 기본 Bean 설정 방법이나
Autowiring 관련한 예외 메시지 해결법도 알려드릴게요!